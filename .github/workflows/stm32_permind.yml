name: ascad_stm32_permind

# Run this workflow every time a new commit pushed to your repository
on: push


jobs:
  distro_package:
    runs-on: ubuntu-latest
    strategy:
      #max-parallel: 5
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
        stm32_test_type: [0]
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 10000
          swap-size-mb: 25000
          remove-dotnet: 'true'
      # Checkout repository
      - name: checkout repository
        uses: actions/checkout@v2
      # Run actions
      - name: set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: tests
        env:
            python-version: ${{ matrix.python-version }}
            STM32_AES_v2: ${{ matrix.stm32_test_type }}
            REPO_NAME: ${{ github.event.repository.name }}
        shell: bash
        run: |
          df -h
          free -h
          # 0) Checkout current branch
          sudo git checkout ${GITHUB_REF##*/}
          # 1) Install necessary packages
          # Fix specific Python 3.6 and 3.7 tensorflow h5py dependency
          if [[ ${python-version} == 3.6 ]]; then pip install h5py==2.10.0; fi
          if [[ ${python-version} == 3.7 ]]; then pip install h5py==2.10.0; fi
          pip install keras numpy h5py matplotlib tensorflow tqdm
          # 2) Handle swapiness
          sudo apt clean
          docker rmi $(docker image ls -aq)
          #######################################################################
          #### Testing STM32_AES_v2/
          #######################################################################
          #######################################################################
          ## 1) Test permind
          # First download elements
          # Download the extracted databases
          if [ "${STM32_AES_v2}" == 0 ]; then cd STM32_AES_v2/ && mkdir -p ASCAD_data/ASCAD_databases && cd -; fi
          if [ "${STM32_AES_v2}" == 0 ]; then echo "Downloading ascadv2-extracted.h5" && cd STM32_AES_v2/ASCAD_data/ASCAD_databases && wget -q https://files.data.gouv.fr/anssi/ascadv2/ascadv2-extracted.h5 && cd -; fi
          # Download the trained models
          if [ "${STM32_AES_v2}" == 0 ]; then cd STM32_AES_v2/ && mkdir -p ASCAD_data/ASCAD_trained_models && cd -; fi
          if [ "${STM32_AES_v2}" == 0 ]; then echo "Downloading ascadv2-multi-resnet-earlystopping.zip" && cd STM32_AES_v2/ASCAD_data/ASCAD_trained_models && wget -O /tmp/ascadv2-multi-resnet-earlystopping.zip -q https://static.data.gouv.fr/resources/ascadv2/20210408-165909/ascadv2-multi-resnet-earlystopping.zip; fi
          if [ "${STM32_AES_v2}" == 0 ]; then echo "Unzipping ascadv2-multi-resnet-earlystopping.zip" && unzip /tmp/ascadv2-multi-resnet-earlystopping.zip && rm /tmp/ascadv2-multi-resnet-earlystopping.zip && cd -; fi
          # Test the trained models
          if [ "${STM32_AES_v2}" == 0 ]; then echo -ne '\n' | python ASCAD_test_models.py STM32_AES_v2/example_test_models_params; fi
          if [ "${STM32_AES_v2}" == 0 ]; then rm STM32_AES_v2/ASCAD_data/ASCAD_trained_models/ascadv2-multi-resnet-earlystopping.h5; fi
          # Train the models
          #if [ "${STM32_AES_v2}" == 0 ]; then sudo swapon && sudo -s sysctl -w vm.swappiness=70 && sudo -s sysctl -w vm.overcommit_memory=2 && sudo -s sysctl -w vm.overcommit_kbytes=0; fi
          # NOTE: large timeout to allow for swap ...
          if [ "${STM32_AES_v2}" == 0 ]; then (timeout 600 python ASCAD_train_models.py STM32_AES_v2/example_train_models_params || code=$?; if [[ $code -ne 124 && $code -ne 0 && $code -ne 137 ]]; then exit $code; fi); fi 
